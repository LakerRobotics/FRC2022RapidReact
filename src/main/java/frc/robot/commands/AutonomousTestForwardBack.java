// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandGroupBase;
import edu.wpi.first.wpilibj2.command.ParallelRaceGroup;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.subsystems.Conveyor;
import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.Intake;
import frc.robot.subsystems.Shooter;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutonomousTestForwardBack extends SequentialCommandGroup {

    public AutonomousTestForwardBack(Intake theIntake, Shooter shooter,Conveyor theConveyor, DriveTrain theDriveTrain){

        //TODO create a startShooterLow command (so it will keep running, all during auton) and 
        //TODO create a StartIntake command

    //Reset the Gyro

        addCommands(new GyroReset(theDriveTrain));

    //Spin up the shooter for Short Shot
        addCommands(new ShooterMoveLow(shooter).withTimeout(2));                                     
 
    // Shoot and run the intake to deploy
       CommandGroupBase spinAndShootAndintake = SequentialCommandGroup.parallel(
                                              new ShooterMoveLow(shooter),
                                              new IntakeMove(theIntake),
                                              new ConveyorMove(theConveyor)).withTimeout(5);
        addCommands(spinAndShootAndintake);

       // Turn Around
       //addCommands(new DriveTrainTurnSpinToAngle(theDriveTrain, 180/*TurnToAngle*/));                                     

       // Now that we are facing a ball on the gound turn on intake and drive towards it
       ParallelRaceGroup driveAndSpinUpShooter = new ParallelRaceGroup(
                                            new ShooterMoveLow(shooter).withTimeout(5),
                                            new DriveTrainMoveStraight(theDriveTrain, 100 /*Distance*/, 1 /*maxSpeed ft/sec*/, 2 /*inch to get to maxSpeed*/, 0 /*Angle to drive straight on*/)
                                            );
        addCommands(driveAndSpinUpShooter);
       

        //Turn back toward Hub,now that we have picked up the ball from the ground
        //addCommands(new DriveTrainTurnSpinToAngle(theDriveTrain, 359));
        
        // Drive towards the Hub, back to where we shot the first ball from
        // CommandGroupBase driveAndSpinUpShooter = SequentialCommandGroup.parallel(
        ParallelRaceGroup driveForwardWithIntake = new ParallelRaceGroup(        
            new IntakeMove(theIntake).withTimeout(5),
            new DriveTrainMoveStraight(theDriveTrain, -100 /*Distance*/, 2 /*maxSpeed ft/sec*/, 2 /*inch to get to maxSpeed*/, 0 /*Angle to drive straight on*/)
           );  
        addCommands(driveForwardWithIntake);
        

        /*CommandGroupBase spinAndShoot = SequentialCommandGroup.parallel(
                                            new ShooterMoveLow(shooter),
                                            new ConveyorMove(theConveyor)).withTimeout(5);
        addCommands(spinAndShoot);*/

        // Drive off the tarmac
        addCommands(new DriveTrainMoveStraight(theDriveTrain, 100 /*Distance*/, 2 /*maxSpeed ft/sec*/, 2 /*inch to get to maxSpeed*/, 360 /*Angle to drive straight on*/));
    }

}
